{"version":3,"sources":["components/Quiz.js","components/ScoreCard.js","styled/index.js","App.js","serviceWorker.js","index.js"],"names":["Quiz","questions","qIndex","currentChoice","onClickAnswer","nextQuestion","isReviewMode","currentQuestion","description","choices","map","c","classes","key","push","answer","className","join","onClick","disabled","ScoreCard","score","setQIndex","AppContainer","styled","div","AppInner","App","useState","setCurrentChoice","isComplete","setIsComplete","setScore","length","choice","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0iOAEe,SAASA,EAAT,GAAgG,IAAhFC,EAA+E,EAA/EA,UAAWC,EAAoE,EAApEA,OAAQC,EAA4D,EAA5DA,cAAeC,EAA6C,EAA7CA,cAAeC,EAA8B,EAA9BA,aAAcC,EAAgB,EAAhBA,aACpFC,EAAkBN,EAAUC,GAClC,OACI,oCACI,4DACA,0CAAgBA,EAAS,EAAzB,UACA,4BAAKK,EAAgBC,aACrB,4BACKD,EAAgBE,QAAQC,KAAI,SAACC,GAC1B,IAAMC,EAAU,GAGhB,OAFID,EAAEE,MAAQV,GAAeS,EAAQE,KAAK,cACtCR,GAAgBK,EAAEE,MAAQN,EAAgBQ,QAAQH,EAAQE,KAAK,aAE/D,wBACIE,UAAWJ,EAAQK,KAAK,KACxBC,QAAS,kBAAMd,EAAcO,EAAEE,OAE/B,gCAASF,EAAEE,IAAX,MACCF,EAAEH,iBAKnB,4BAAQW,UAAWhB,IAAkBG,EAAcY,QAASb,GAA5D,kBCZGe,MAXf,YAA0C,IAArBC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,UAC1B,OACE,oCACE,8BACGD,GAEH,4BAAQH,QAAS,kBAAMI,EAAU,KAAjC,Y,gzCCNC,IAAMC,EAAeC,IAAOC,IAAV,KASZC,EAAWF,IAAOC,IAAV,K,MCwCNE,MA5Cf,WAAgB,IAAD,EACeC,mBAAS,GADxB,mBACN1B,EADM,KACEoB,EADF,OAE6BM,qBAF7B,mBAENzB,EAFM,KAES0B,EAFT,OAGuBD,oBAAS,GAHhC,mBAGNE,EAHM,KAGMC,EAHN,OAIaH,mBAAS,GAJtB,mBAINP,EAJM,KAICW,EAJD,KAqBb,OACE,kBAACT,EAAD,KACE,kBAACG,EAAD,KACGxB,EAASD,EAAUgC,OAAS,EAC3B,kBAAC,EAAD,CACEZ,MAAOA,EACPC,UAAWA,IAGX,kBAACtB,EAAD,CACEE,OAAQA,EACRD,UAAWA,EACXE,cAAeA,EACfC,cA5BU,SAAC8B,GAChBJ,GAAYD,EAAiBK,IA4BxB7B,aAzBS,WACfF,IAAkBF,EAAUC,GAAQa,QACtCiB,EAASX,EAAQ,GAEnBQ,GAAiB,GACjBP,EAAUpB,EAAS,GACfA,EAAS,IAAMD,EAAUgC,QAC3BF,GAAc,IAmBNzB,aAAcwB,OC/BRK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c34bd67b.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function Quiz({ questions, qIndex, currentChoice, onClickAnswer, nextQuestion, isReviewMode }) {\n    const currentQuestion = questions[qIndex] // this is where you call the props from questions.json ??\n    return (\n        <>\n            <h1>DMV Permit Practice Test, CA</h1>\n            <span>Question {qIndex + 1} of 20</span>\n            <h1>{currentQuestion.description}</h1>\n            <ul>\n                {currentQuestion.choices.map((c) => {\n                    const classes = []\n                    if (c.key === currentChoice) classes.push(\"isSelected\")\n                    if (isReviewMode && c.key === currentQuestion.answer) classes.push(\"isCorrect\")\n                    return (\n                        <li\n                            className={classes.join(' ')}\n                            onClick={() => onClickAnswer(c.key)}\n                        >\n                            <strong>{c.key}. </strong>\n                            {c.description}\n                        </li>\n                    )\n                })}\n            </ul>\n            <button disabled={!currentChoice && !isReviewMode} onClick={nextQuestion}>Next Question</button>\n        </>\n    )\n}\n","import React from 'react'\n\nfunction ScoreCard({ score, setQIndex }) {\n  return (\n    <>\n      <span>\n        {score}\n      </span>\n      <button onClick={() => setQIndex(1)}>Review</button>\n    </>\n  )\n}\n\nexport default ScoreCard\n","import styled from 'styled-components'\n\nexport const AppContainer = styled.div`\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n`\n\nexport const AppInner = styled.div`\n  margin: 0 auto;\n  width: 100%;\n  max-width: 600px;\n  display: flex;\n  flex-direction: column;\n  h1 {\n    line-height: 1.2;\n    color: #333436;\n    margin-bottom: 24px;\n  }\n  button {\n    margin-top: 36px;\n    width: 300px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n  ul {\n    display: flex;\n    flex-direction: column;\n    flex-wrap: wrap;\n    li {\n      display: block;\n      border: 1px solid darkgray;\n      border-radius: 4px;\n      padding: 8px;\n      margin: 8px 0;\n      cursor: pointer;\n      transition: 0.4s ease;\n      strong {\n        transition: 0.8s ease;\n      }\n    }\n    li.isSelected {\n      strong {\n        color: gray;\n      }\n      color: gray;\n      background-color: darkgray;\n    }\n    li.isCorrect {\n      strong {\n        color: black;\n      }\n      color: black;\n      background-color: white;\n    }\n  }\n  span {\n    display: flex;\n    margin-bottom: 24px;\n    flex-direction: column;\n    justify-content: space-around;\n  }\n`","import React, { useState } from 'react'\nimport questions from './questions.json'\nimport Quiz from './components/Quiz'\nimport ScoreCard from './components/ScoreCard'\nimport { AppContainer, AppInner } from './styled'\nimport './App.css';\n\nfunction App() {\n  const [qIndex, setQIndex] = useState(0)\n  const [currentChoice, setCurrentChoice] = useState()\n  const [isComplete, setIsComplete] = useState(false)\n  const [score, setScore] = useState(0)\n\n  const onClickAnswer = (choice) => {\n    if (!isComplete) setCurrentChoice(choice)\n  }\n\n  const nextQuestion = () => {\n    if (currentChoice === questions[qIndex].answer) {\n      setScore(score + 1)\n    }\n    setCurrentChoice(false)\n    setQIndex(qIndex + 1)\n    if (qIndex + 1 === questions.length) {\n      setIsComplete(true)\n    }\n  }\n\n  return (\n    <AppContainer>\n      <AppInner>\n        {qIndex > questions.length - 1 ? (\n          <ScoreCard\n            score={score}\n            setQIndex={setQIndex}\n          />\n        ) : (\n            <Quiz\n              qIndex={qIndex}\n              questions={questions}\n              currentChoice={currentChoice}\n              onClickAnswer={onClickAnswer}\n              nextQuestion={nextQuestion}\n              isReviewMode={isComplete}\n            />\n          )}\n      </AppInner>\n    </AppContainer>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}